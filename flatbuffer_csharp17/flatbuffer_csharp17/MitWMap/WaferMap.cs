// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MitWMap
{

using global::System;
using global::FlatBuffers;

public struct WaferMap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static WaferMap GetRootAsWaferMap(ByteBuffer _bb) { return GetRootAsWaferMap(_bb, new WaferMap()); }
  public static WaferMap GetRootAsWaferMap(ByteBuffer _bb, WaferMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public WaferMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Waferid { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWaferidBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetWaferidBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetWaferidArray() { return __p.__vector_as_array<byte>(4); }
  public short Wafernum { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string Lotid { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLotidBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetLotidBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLotidArray() { return __p.__vector_as_array<byte>(8); }
  public format BinFormat { get { int o = __p.__offset(10); return o != 0 ? (format)__p.bb.GetSbyte(o + __p.bb_pos) : format.Ascii; } }
  public short Map(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetShort(__p.__vector(o) + j * 2) : (short)0; }
  public int MapLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetMapBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public short[] GetMapArray() { return __p.__vector_as_array<short>(12); }

  public static Offset<WaferMap> CreateWaferMap(FlatBufferBuilder builder,
      StringOffset waferidOffset = default(StringOffset),
      short wafernum = 0,
      StringOffset lotidOffset = default(StringOffset),
      format binFormat = format.Ascii,
      VectorOffset mapOffset = default(VectorOffset)) {
    builder.StartObject(5);
    WaferMap.AddMap(builder, mapOffset);
    WaferMap.AddLotid(builder, lotidOffset);
    WaferMap.AddWaferid(builder, waferidOffset);
    WaferMap.AddWafernum(builder, wafernum);
    WaferMap.AddBinFormat(builder, binFormat);
    return WaferMap.EndWaferMap(builder);
  }

  public static void StartWaferMap(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddWaferid(FlatBufferBuilder builder, StringOffset waferidOffset) { builder.AddOffset(0, waferidOffset.Value, 0); }
  public static void AddWafernum(FlatBufferBuilder builder, short wafernum) { builder.AddShort(1, wafernum, 0); }
  public static void AddLotid(FlatBufferBuilder builder, StringOffset lotidOffset) { builder.AddOffset(2, lotidOffset.Value, 0); }
  public static void AddBinFormat(FlatBufferBuilder builder, format binFormat) { builder.AddSbyte(3, (sbyte)binFormat, 1); }
  public static void AddMap(FlatBufferBuilder builder, VectorOffset mapOffset) { builder.AddOffset(4, mapOffset.Value, 0); }
  public static VectorOffset CreateMapVector(FlatBufferBuilder builder, short[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddShort(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMapVectorBlock(FlatBufferBuilder builder, short[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static void StartMapVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static Offset<WaferMap> EndWaferMap(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WaferMap>(o);
  }
  public static void FinishWaferMapBuffer(FlatBufferBuilder builder, Offset<WaferMap> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedWaferMapBuffer(FlatBufferBuilder builder, Offset<WaferMap> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
