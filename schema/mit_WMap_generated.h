// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MITWMAP_MITWMAP_H_
#define FLATBUFFERS_GENERATED_MITWMAP_MITWMAP_H_

#include "flatbuffers/flatbuffers.h"

namespace MitWMap {

struct WaferMap;

enum format {
  format_Ascii = 1,
  format_Hex = 2,
  format_Dec = 3,
  format_MIN = format_Ascii,
  format_MAX = format_Dec
};

inline const format (&EnumValuesformat())[3] {
  static const format values[] = {
    format_Ascii,
    format_Hex,
    format_Dec
  };
  return values;
}

inline const char * const *EnumNamesformat() {
  static const char * const names[] = {
    "Ascii",
    "Hex",
    "Dec",
    nullptr
  };
  return names;
}

inline const char *EnumNameformat(format e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(format_Ascii);
  return EnumNamesformat()[index];
}

struct WaferMap FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WAFERID = 4,
    VT_WAFERNUM = 6,
    VT_LOTID = 8,
    VT_BINFORMAT = 10,
    VT_MAP = 12
  };
  const flatbuffers::String *waferid() const {
    return GetPointer<const flatbuffers::String *>(VT_WAFERID);
  }
  int16_t wafernum() const {
    return GetField<int16_t>(VT_WAFERNUM, 0);
  }
  const flatbuffers::String *lotid() const {
    return GetPointer<const flatbuffers::String *>(VT_LOTID);
  }
  format binFormat() const {
    return static_cast<format>(GetField<int8_t>(VT_BINFORMAT, 1));
  }
  const flatbuffers::Vector<int16_t> *map() const {
    return GetPointer<const flatbuffers::Vector<int16_t> *>(VT_MAP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WAFERID) &&
           verifier.VerifyString(waferid()) &&
           VerifyField<int16_t>(verifier, VT_WAFERNUM) &&
           VerifyOffset(verifier, VT_LOTID) &&
           verifier.VerifyString(lotid()) &&
           VerifyField<int8_t>(verifier, VT_BINFORMAT) &&
           VerifyOffset(verifier, VT_MAP) &&
           verifier.VerifyVector(map()) &&
           verifier.EndTable();
  }
};

struct WaferMapBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_waferid(flatbuffers::Offset<flatbuffers::String> waferid) {
    fbb_.AddOffset(WaferMap::VT_WAFERID, waferid);
  }
  void add_wafernum(int16_t wafernum) {
    fbb_.AddElement<int16_t>(WaferMap::VT_WAFERNUM, wafernum, 0);
  }
  void add_lotid(flatbuffers::Offset<flatbuffers::String> lotid) {
    fbb_.AddOffset(WaferMap::VT_LOTID, lotid);
  }
  void add_binFormat(format binFormat) {
    fbb_.AddElement<int8_t>(WaferMap::VT_BINFORMAT, static_cast<int8_t>(binFormat), 1);
  }
  void add_map(flatbuffers::Offset<flatbuffers::Vector<int16_t>> map) {
    fbb_.AddOffset(WaferMap::VT_MAP, map);
  }
  explicit WaferMapBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WaferMapBuilder &operator=(const WaferMapBuilder &);
  flatbuffers::Offset<WaferMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WaferMap>(end);
    return o;
  }
};

inline flatbuffers::Offset<WaferMap> CreateWaferMap(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> waferid = 0,
    int16_t wafernum = 0,
    flatbuffers::Offset<flatbuffers::String> lotid = 0,
    format binFormat = format_Ascii,
    flatbuffers::Offset<flatbuffers::Vector<int16_t>> map = 0) {
  WaferMapBuilder builder_(_fbb);
  builder_.add_map(map);
  builder_.add_lotid(lotid);
  builder_.add_waferid(waferid);
  builder_.add_wafernum(wafernum);
  builder_.add_binFormat(binFormat);
  return builder_.Finish();
}

inline flatbuffers::Offset<WaferMap> CreateWaferMapDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *waferid = nullptr,
    int16_t wafernum = 0,
    const char *lotid = nullptr,
    format binFormat = format_Ascii,
    const std::vector<int16_t> *map = nullptr) {
  return MitWMap::CreateWaferMap(
      _fbb,
      waferid ? _fbb.CreateString(waferid) : 0,
      wafernum,
      lotid ? _fbb.CreateString(lotid) : 0,
      binFormat,
      map ? _fbb.CreateVector<int16_t>(*map) : 0);
}

inline const MitWMap::WaferMap *GetWaferMap(const void *buf) {
  return flatbuffers::GetRoot<MitWMap::WaferMap>(buf);
}

inline const MitWMap::WaferMap *GetSizePrefixedWaferMap(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MitWMap::WaferMap>(buf);
}

inline bool VerifyWaferMapBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MitWMap::WaferMap>(nullptr);
}

inline bool VerifySizePrefixedWaferMapBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MitWMap::WaferMap>(nullptr);
}

inline void FinishWaferMapBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MitWMap::WaferMap> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWaferMapBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MitWMap::WaferMap> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MitWMap

#endif  // FLATBUFFERS_GENERATED_MITWMAP_MITWMAP_H_
