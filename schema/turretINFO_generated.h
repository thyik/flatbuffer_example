// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TURRETINFO_TURRETINFO_H_
#define FLATBUFFERS_GENERATED_TURRETINFO_TURRETINFO_H_

#include "flatbuffers/flatbuffers.h"

namespace turretINFO {

struct stStnInfo;

struct INFO;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) stStnInfo FLATBUFFERS_FINAL_CLASS {
 private:
  int16_t row_;
  int16_t col_;
  int16_t result_;
  int8_t head_;
  int8_t exist_;

 public:
  stStnInfo() {
    memset(this, 0, sizeof(stStnInfo));
  }
  stStnInfo(int16_t _row, int16_t _col, int16_t _result, int8_t _head, int8_t _exist)
      : row_(flatbuffers::EndianScalar(_row)),
        col_(flatbuffers::EndianScalar(_col)),
        result_(flatbuffers::EndianScalar(_result)),
        head_(flatbuffers::EndianScalar(_head)),
        exist_(flatbuffers::EndianScalar(_exist)) {
  }
  int16_t row() const {
    return flatbuffers::EndianScalar(row_);
  }
  int16_t col() const {
    return flatbuffers::EndianScalar(col_);
  }
  int16_t result() const {
    return flatbuffers::EndianScalar(result_);
  }
  int8_t head() const {
    return flatbuffers::EndianScalar(head_);
  }
  int8_t exist() const {
    return flatbuffers::EndianScalar(exist_);
  }
};
FLATBUFFERS_STRUCT_END(stStnInfo, 8);

struct INFO FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TURRET = 4
  };
  const flatbuffers::Vector<const stStnInfo *> *turret() const {
    return GetPointer<const flatbuffers::Vector<const stStnInfo *> *>(VT_TURRET);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TURRET) &&
           verifier.VerifyVector(turret()) &&
           verifier.EndTable();
  }
};

struct INFOBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_turret(flatbuffers::Offset<flatbuffers::Vector<const stStnInfo *>> turret) {
    fbb_.AddOffset(INFO::VT_TURRET, turret);
  }
  explicit INFOBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  INFOBuilder &operator=(const INFOBuilder &);
  flatbuffers::Offset<INFO> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<INFO>(end);
    return o;
  }
};

inline flatbuffers::Offset<INFO> CreateINFO(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const stStnInfo *>> turret = 0) {
  INFOBuilder builder_(_fbb);
  builder_.add_turret(turret);
  return builder_.Finish();
}

inline flatbuffers::Offset<INFO> CreateINFODirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<stStnInfo> *turret = nullptr) {
  return turretINFO::CreateINFO(
      _fbb,
      turret ? _fbb.CreateVectorOfStructs<stStnInfo>(*turret) : 0);
}

inline const turretINFO::INFO *GetINFO(const void *buf) {
  return flatbuffers::GetRoot<turretINFO::INFO>(buf);
}

inline const turretINFO::INFO *GetSizePrefixedINFO(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<turretINFO::INFO>(buf);
}

inline bool VerifyINFOBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<turretINFO::INFO>(nullptr);
}

inline bool VerifySizePrefixedINFOBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<turretINFO::INFO>(nullptr);
}

inline void FinishINFOBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<turretINFO::INFO> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedINFOBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<turretINFO::INFO> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace turretINFO

#endif  // FLATBUFFERS_GENERATED_TURRETINFO_TURRETINFO_H_
