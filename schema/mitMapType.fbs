// Example IDL file for our MitUltMap1's schema.
// for C330
namespace MitMapType;

enum MapType : byte {
	MAP_GENERIC = 0,
	MAP_ULT_C330,
	MAP_ULT_MR3,
	MAP_ULT_MR3_TBL_FMT,
}

enum format : byte { 
	Ascii = 1, 
	Hex = 2 , 
	Dec = 3 
}

struct stXY {
  x:short = 0;
  y:short = 0;
}

struct stfXY {
  x:float = 0.0;
  y:float = 0.0;
}

struct stfOFFSET {
  x:float = 0.0;
  y:float = 0.0;
  a:float = 0.0;
}

struct stRejCode {
  pc:ubyte = 0;  // cater for 0-10
  app:ubyte = 0; // cater for 0-15
  code:ubyte = 0; // cater for 0-99
}

// Do not add premitive/non-scalar member here
// Need to utilize memcpy for memory copy optimization
struct stUnitInfo {
  pocket:int = 0;  // align data from big to small to avoid padding insertion
  reel:short = 0;  // cater for max 99999
  bincode:short = 0; // bin 0 - 999
  rejcode:stRejCode;
  valid:bool = false; // cater for indication of valid die (eg. within wafer)
 
}

// MR3 : optimize to use struct
struct stUnitInfo2 {
  goodDie:int = 0; 
  placedDie:int = 0;
  bincode:short = 0; 		// bin 0 - 999
  rejcode:stRejCode;
  valid:bool = false;   // cater for indication of valid die (eg. within wafer)
  
  // pnp #, flipper# etc
  pnp:ubyte;   			
  
  //pick, place, purge, etc
  pickForce:short; 	
  placeForce:short;
  purgeForce:short;
  //
  inwaferCoor:stXY;
  outwaferCoor:stXY;
}

// For MR3
table TblUnitInfo2 {
  goodDie:int = 0; 
  placedDie:int = 0;
  bincode:short = 0; 		// bin 0 - 999
  rejcode:stRejCode;
  valid:bool = false; 		// cater for indication of valid die (eg. within wafer)
  
  pnp:ubyte;   			// pnp #, flipper# etc
  //
  pickForce:short; 	    //pick, place, purge, etc
  placeForce:short; 	//pick, place, purge, etc
  purgeForce:short; 	//pick, place, purge, etc
  //
  inwaferCoor:stXY;
  outwaferCoor:stXY;
}

//
table TblLotInfo {
  machine:string;
  lotNum:string;
  packageName:string;
  recipeName:string;
  shift:string;
  operator:string;
}

table TblWaferInfo {
  dieSize:stfXY;
  notch:short = 0; // equivalent to map orientation
  targetDie:[stXY];	// vector of struct
  waferId:string;
  wafersize:float = 200.0;
  maxRowCol:stXY;
  dieGap:stfXY;
  edgeClearance:float = 5.0;
  pickDegree:short = 0;  // cater : for drawing purpose
  
  // additional info based on standard mit map design
  // ported from schema MitMAP.fbs;
  degRotated:short = 0;   // tentatively not use
  refDie:[stXY];	// vector of struct
  refChipDir:short = 0;
  waferFab:string;
  fabCode:string;
  intCode:string;
  device:string;
  designId:string;
  layout:string;
  scribId:string;
  scribLot:string;
  mapId:short = 0;
  startLoc:stXY;
  nullBin:short = 0;
  bincodeFormat:format = Hex; // for legacy map purpose
}

table MapRoot {
  type:MapType = MAP_ULT_C330;   // cater to indicate map type
  lotInfo:TblLotInfo;
  waferInfo:TblWaferInfo;
  //
  unit:[short];                 // Vector of short (Generic map)
  //
  ult:[stUnitInfo];				// Vector of struct (C330 ult map)
  //
  ult2:[stUnitInfo2];			// Vector of struct (MR3 ult tracking)
  //
  // option : flexible to add vector item at the expense of performance & storage
  TblUlt2:[TblUnitInfo2];          // Vector of Table (MR3 ult tracking)
}

root_type MapRoot;