// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MITFBINI_MITFBINI_H_
#define FLATBUFFERS_GENERATED_MITFBINI_MITFBINI_H_

#include "flatbuffers/flatbuffers.h"

namespace MitFBINI {

struct FBINI;

struct KEYVALUE;

struct FBINI FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SECTION = 4,
    VT_ITEM = 6
  };
  const flatbuffers::String *section() const {
    return GetPointer<const flatbuffers::String *>(VT_SECTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<KEYVALUE>> *item() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<KEYVALUE>> *>(VT_ITEM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SECTION) &&
           verifier.VerifyString(section()) &&
           VerifyOffset(verifier, VT_ITEM) &&
           verifier.VerifyVector(item()) &&
           verifier.VerifyVectorOfTables(item()) &&
           verifier.EndTable();
  }
};

struct FBINIBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_section(flatbuffers::Offset<flatbuffers::String> section) {
    fbb_.AddOffset(FBINI::VT_SECTION, section);
  }
  void add_item(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KEYVALUE>>> item) {
    fbb_.AddOffset(FBINI::VT_ITEM, item);
  }
  explicit FBINIBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FBINIBuilder &operator=(const FBINIBuilder &);
  flatbuffers::Offset<FBINI> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FBINI>(end);
    return o;
  }
};

inline flatbuffers::Offset<FBINI> CreateFBINI(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> section = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<KEYVALUE>>> item = 0) {
  FBINIBuilder builder_(_fbb);
  builder_.add_item(item);
  builder_.add_section(section);
  return builder_.Finish();
}

inline flatbuffers::Offset<FBINI> CreateFBINIDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *section = nullptr,
    const std::vector<flatbuffers::Offset<KEYVALUE>> *item = nullptr) {
  return MitFBINI::CreateFBINI(
      _fbb,
      section ? _fbb.CreateString(section) : 0,
      item ? _fbb.CreateVector<flatbuffers::Offset<KEYVALUE>>(*item) : 0);
}

struct KEYVALUE FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_KEY = 4,
    VT_STRVALUE = 6,
    VT_LVALUE = 8,
    VT_DVALUE = 10
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  const flatbuffers::String *strValue() const {
    return GetPointer<const flatbuffers::String *>(VT_STRVALUE);
  }
  int64_t lValue() const {
    return GetField<int64_t>(VT_LVALUE, 0);
  }
  float dValue() const {
    return GetField<float>(VT_DVALUE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_STRVALUE) &&
           verifier.VerifyString(strValue()) &&
           VerifyField<int64_t>(verifier, VT_LVALUE) &&
           VerifyField<float>(verifier, VT_DVALUE) &&
           verifier.EndTable();
  }
};

struct KEYVALUEBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(KEYVALUE::VT_KEY, key);
  }
  void add_strValue(flatbuffers::Offset<flatbuffers::String> strValue) {
    fbb_.AddOffset(KEYVALUE::VT_STRVALUE, strValue);
  }
  void add_lValue(int64_t lValue) {
    fbb_.AddElement<int64_t>(KEYVALUE::VT_LVALUE, lValue, 0);
  }
  void add_dValue(float dValue) {
    fbb_.AddElement<float>(KEYVALUE::VT_DVALUE, dValue, 0.0f);
  }
  explicit KEYVALUEBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  KEYVALUEBuilder &operator=(const KEYVALUEBuilder &);
  flatbuffers::Offset<KEYVALUE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<KEYVALUE>(end);
    return o;
  }
};

inline flatbuffers::Offset<KEYVALUE> CreateKEYVALUE(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::String> strValue = 0,
    int64_t lValue = 0,
    float dValue = 0.0f) {
  KEYVALUEBuilder builder_(_fbb);
  builder_.add_lValue(lValue);
  builder_.add_dValue(dValue);
  builder_.add_strValue(strValue);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<KEYVALUE> CreateKEYVALUEDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *strValue = nullptr,
    int64_t lValue = 0,
    float dValue = 0.0f) {
  return MitFBINI::CreateKEYVALUE(
      _fbb,
      key ? _fbb.CreateString(key) : 0,
      strValue ? _fbb.CreateString(strValue) : 0,
      lValue,
      dValue);
}

inline const MitFBINI::FBINI *GetFBINI(const void *buf) {
  return flatbuffers::GetRoot<MitFBINI::FBINI>(buf);
}

inline const MitFBINI::FBINI *GetSizePrefixedFBINI(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MitFBINI::FBINI>(buf);
}

inline bool VerifyFBINIBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MitFBINI::FBINI>(nullptr);
}

inline bool VerifySizePrefixedFBINIBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MitFBINI::FBINI>(nullptr);
}

inline void FinishFBINIBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MitFBINI::FBINI> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFBINIBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MitFBINI::FBINI> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MitFBINI

#endif  // FLATBUFFERS_GENERATED_MITFBINI_MITFBINI_H_
