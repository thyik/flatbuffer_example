// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ULTINFO_ULTINFO_H_
#define FLATBUFFERS_GENERATED_ULTINFO_ULTINFO_H_

#include "flatbuffers/flatbuffers.h"

namespace ultINFO {

struct stXY;

struct stUnit;

struct UltRoot;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) stXY FLATBUFFERS_FINAL_CLASS {
 private:
  int16_t x_;
  int16_t y_;

 public:
  stXY() {
    memset(this, 0, sizeof(stXY));
  }
  stXY(int16_t _x, int16_t _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  int16_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int16_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(stXY, 4);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) stUnit FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t goodDie_;
  int32_t placedDie_;
  int16_t flipper_;
  int16_t pnp_;
  int16_t pickForce_;
  int16_t placeForce_;
  int16_t purgeForce_;
  int16_t bincode_;
  int16_t rejcode_;
  int16_t padding0__;
  uint32_t unitstate_;
  stXY inCoor_;
  stXY outCoor_;

 public:
  stUnit() {
    memset(this, 0, sizeof(stUnit));
  }
  stUnit(int32_t _goodDie, int32_t _placedDie, int16_t _flipper, int16_t _pnp, int16_t _pickForce, int16_t _placeForce, int16_t _purgeForce, int16_t _bincode, int16_t _rejcode, uint32_t _unitstate, const stXY &_inCoor, const stXY &_outCoor)
      : goodDie_(flatbuffers::EndianScalar(_goodDie)),
        placedDie_(flatbuffers::EndianScalar(_placedDie)),
        flipper_(flatbuffers::EndianScalar(_flipper)),
        pnp_(flatbuffers::EndianScalar(_pnp)),
        pickForce_(flatbuffers::EndianScalar(_pickForce)),
        placeForce_(flatbuffers::EndianScalar(_placeForce)),
        purgeForce_(flatbuffers::EndianScalar(_purgeForce)),
        bincode_(flatbuffers::EndianScalar(_bincode)),
        rejcode_(flatbuffers::EndianScalar(_rejcode)),
        padding0__(0),
        unitstate_(flatbuffers::EndianScalar(_unitstate)),
        inCoor_(_inCoor),
        outCoor_(_outCoor) {
    (void)padding0__;
  }
  int32_t goodDie() const {
    return flatbuffers::EndianScalar(goodDie_);
  }
  int32_t placedDie() const {
    return flatbuffers::EndianScalar(placedDie_);
  }
  int16_t flipper() const {
    return flatbuffers::EndianScalar(flipper_);
  }
  int16_t pnp() const {
    return flatbuffers::EndianScalar(pnp_);
  }
  int16_t pickForce() const {
    return flatbuffers::EndianScalar(pickForce_);
  }
  int16_t placeForce() const {
    return flatbuffers::EndianScalar(placeForce_);
  }
  int16_t purgeForce() const {
    return flatbuffers::EndianScalar(purgeForce_);
  }
  int16_t bincode() const {
    return flatbuffers::EndianScalar(bincode_);
  }
  int16_t rejcode() const {
    return flatbuffers::EndianScalar(rejcode_);
  }
  uint32_t unitstate() const {
    return flatbuffers::EndianScalar(unitstate_);
  }
  const stXY &inCoor() const {
    return inCoor_;
  }
  const stXY &outCoor() const {
    return outCoor_;
  }
};
FLATBUFFERS_STRUCT_END(stUnit, 36);

struct UltRoot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UNIT = 4
  };
  const flatbuffers::Vector<const stUnit *> *unit() const {
    return GetPointer<const flatbuffers::Vector<const stUnit *> *>(VT_UNIT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNIT) &&
           verifier.VerifyVector(unit()) &&
           verifier.EndTable();
  }
};

struct UltRootBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_unit(flatbuffers::Offset<flatbuffers::Vector<const stUnit *>> unit) {
    fbb_.AddOffset(UltRoot::VT_UNIT, unit);
  }
  explicit UltRootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UltRootBuilder &operator=(const UltRootBuilder &);
  flatbuffers::Offset<UltRoot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UltRoot>(end);
    return o;
  }
};

inline flatbuffers::Offset<UltRoot> CreateUltRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const stUnit *>> unit = 0) {
  UltRootBuilder builder_(_fbb);
  builder_.add_unit(unit);
  return builder_.Finish();
}

inline flatbuffers::Offset<UltRoot> CreateUltRootDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<stUnit> *unit = nullptr) {
  return ultINFO::CreateUltRoot(
      _fbb,
      unit ? _fbb.CreateVectorOfStructs<stUnit>(*unit) : 0);
}

inline const ultINFO::UltRoot *GetUltRoot(const void *buf) {
  return flatbuffers::GetRoot<ultINFO::UltRoot>(buf);
}

inline const ultINFO::UltRoot *GetSizePrefixedUltRoot(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ultINFO::UltRoot>(buf);
}

inline bool VerifyUltRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ultINFO::UltRoot>(nullptr);
}

inline bool VerifySizePrefixedUltRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ultINFO::UltRoot>(nullptr);
}

inline void FinishUltRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ultINFO::UltRoot> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUltRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ultINFO::UltRoot> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ultINFO

#endif  // FLATBUFFERS_GENERATED_ULTINFO_ULTINFO_H_
